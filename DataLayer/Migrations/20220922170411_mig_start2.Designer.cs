// <auto-generated />
using System;
using DataLayer.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220922170411_mig_start2")]
    partial class mig_start2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Models.Banner.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BannerCol")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("Domain.Models.Common.DynamicLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LinkUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DynamicLinks");
                });

            modelBuilder.Entity("Domain.Models.Common.DynamicPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("LinkId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LinkId")
                        .IsUnique();

                    b.ToTable("DynamicPages");
                });

            modelBuilder.Entity("Domain.Models.Common.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desctiption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("LogType")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Domain.Models.Common.SocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("PlatForm")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SocialMedias");
                });

            modelBuilder.Entity("Domain.Models.ContactUss", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Subject")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ContactUss");
                });

            modelBuilder.Entity("Domain.Models.FAQ.FAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FAQs");
                });

            modelBuilder.Entity("Domain.Models.Order.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FinalizedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinally")
                        .HasColumnType("bit");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.Models.Order.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductPriceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductPriceId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Domain.Models.Order.OrderDetailProductFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeatureTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeatureValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("OrderDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderDetailId");

                    b.ToTable("OrderDetailProductFeatures");
                });

            modelBuilder.Entity("Domain.Models.Product.FavoriteProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteProducts");
                });

            modelBuilder.Entity("Domain.Models.Product.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("Domain.Models.Product.FeatureValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.ToTable("FeatureValues");
                });

            modelBuilder.Entity("Domain.Models.Product.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Domain.Models.Product.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("ParnetId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ParnetId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Domain.Models.Product.ProductComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SenderId");

                    b.ToTable("ProductComments");
                });

            modelBuilder.Entity("Domain.Models.Product.ProductGallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductGalleries");
                });

            modelBuilder.Entity("Domain.Models.Product.ProductPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPrices");
                });

            modelBuilder.Entity("Domain.Models.Product.ProductSelectedCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductSelectedCategories");
                });

            modelBuilder.Entity("Domain.Models.Product.ProductSelectedFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<int>("FeatureValueId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("ProductPriceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("FeatureValueId");

                    b.HasIndex("ProductPriceId");

                    b.ToTable("ProductSelectedFeatures");
                });

            modelBuilder.Entity("Domain.Models.Product.ProductTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductTags");
                });

            modelBuilder.Entity("Domain.Models.Role.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(3555),
                            IsDelete = false,
                            Title = "مدیریت سایت"
                        },
                        new
                        {
                            Id = 2,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(3576),
                            IsDelete = false,
                            ParentId = 1,
                            Title = "مدیریت کاربران"
                        },
                        new
                        {
                            Id = 3,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(3593),
                            IsDelete = false,
                            ParentId = 2,
                            Title = "افزودن کاربر"
                        },
                        new
                        {
                            Id = 4,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(3609),
                            IsDelete = false,
                            ParentId = 2,
                            Title = "ویرایش کاربر"
                        },
                        new
                        {
                            Id = 5,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(3626),
                            IsDelete = false,
                            ParentId = 2,
                            Title = "حذف کاربر"
                        },
                        new
                        {
                            Id = 6,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(3644),
                            IsDelete = false,
                            ParentId = 2,
                            Title = "سفارشات کاربران"
                        },
                        new
                        {
                            Id = 7,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(3659),
                            IsDelete = false,
                            ParentId = 2,
                            Title = "دسترسی کاربر"
                        },
                        new
                        {
                            Id = 8,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(3674),
                            IsDelete = false,
                            ParentId = 2,
                            Title = "محصولات مورد علافه کاربر"
                        },
                        new
                        {
                            Id = 13,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(3690),
                            IsDelete = false,
                            ParentId = 1,
                            Title = "مدیریت تماس با ما"
                        },
                        new
                        {
                            Id = 15,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(3708),
                            IsDelete = false,
                            ParentId = 13,
                            Title = "حذف تماس با ما"
                        },
                        new
                        {
                            Id = 16,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(3725),
                            IsDelete = false,
                            ParentId = 13,
                            Title = "پاسخ تماس با ما"
                        },
                        new
                        {
                            Id = 17,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(3768),
                            IsDelete = false,
                            ParentId = 1,
                            Title = "مدیریت تیکت ها"
                        },
                        new
                        {
                            Id = 18,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(3785),
                            IsDelete = false,
                            ParentId = 17,
                            Title = "افزودن تیکت"
                        },
                        new
                        {
                            Id = 20,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(3801),
                            IsDelete = false,
                            ParentId = 17,
                            Title = "بستن تیکت"
                        },
                        new
                        {
                            Id = 21,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(3817),
                            IsDelete = false,
                            ParentId = 17,
                            Title = "پاسخ به تیکت"
                        },
                        new
                        {
                            Id = 22,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(3833),
                            IsDelete = false,
                            ParentId = 1,
                            Title = "میدیریت محصولات"
                        },
                        new
                        {
                            Id = 23,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(3849),
                            IsDelete = false,
                            ParentId = 22,
                            Title = "افزودن محصول"
                        },
                        new
                        {
                            Id = 24,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(3867),
                            IsDelete = false,
                            ParentId = 22,
                            Title = "مدیریت تصاویر محصول"
                        },
                        new
                        {
                            Id = 25,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(3886),
                            IsDelete = false,
                            ParentId = 22,
                            Title = "مدیریت نظرات محصول"
                        },
                        new
                        {
                            Id = 27,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(3901),
                            IsDelete = false,
                            ParentId = 22,
                            Title = "مدیریت تگ های محصول"
                        },
                        new
                        {
                            Id = 28,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(3917),
                            IsDelete = false,
                            ParentId = 22,
                            Title = "ویرایش محصول"
                        },
                        new
                        {
                            Id = 29,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(3932),
                            IsDelete = false,
                            ParentId = 22,
                            Title = "حذف محصول"
                        },
                        new
                        {
                            Id = 30,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(3947),
                            IsDelete = false,
                            ParentId = 1,
                            Title = "مدیریت ویژگی ها"
                        },
                        new
                        {
                            Id = 31,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(3963),
                            IsDelete = false,
                            ParentId = 30,
                            Title = "مدیریت مقادیر ویژگی ها"
                        },
                        new
                        {
                            Id = 32,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(3979),
                            IsDelete = false,
                            ParentId = 1,
                            Title = "مدیریت دسته بندی محصولات"
                        },
                        new
                        {
                            Id = 33,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(3994),
                            IsDelete = false,
                            ParentId = 7,
                            Title = "افزودن نقش کاربر"
                        },
                        new
                        {
                            Id = 34,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4010),
                            IsDelete = false,
                            ParentId = 7,
                            Title = "حذف نقش کاربر"
                        },
                        new
                        {
                            Id = 35,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4025),
                            IsDelete = false,
                            ParentId = 1,
                            Title = "مدیریت نقش ها"
                        },
                        new
                        {
                            Id = 36,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4041),
                            IsDelete = false,
                            ParentId = 35,
                            Title = "افزودن نقش"
                        },
                        new
                        {
                            Id = 37,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4056),
                            IsDelete = false,
                            ParentId = 35,
                            Title = "ویرایش نقش"
                        },
                        new
                        {
                            Id = 38,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4071),
                            IsDelete = false,
                            ParentId = 35,
                            Title = "حذف نقش"
                        },
                        new
                        {
                            Id = 39,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4087),
                            IsDelete = false,
                            ParentId = 1,
                            Title = "مدیریت لینک"
                        },
                        new
                        {
                            Id = 40,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4102),
                            IsDelete = false,
                            ParentId = 39,
                            Title = "افزودن لینک"
                        },
                        new
                        {
                            Id = 41,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4121),
                            IsDelete = false,
                            ParentId = 39,
                            Title = "ویرایش لینک"
                        },
                        new
                        {
                            Id = 42,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4136),
                            IsDelete = false,
                            ParentId = 39,
                            Title = "حذف لینک"
                        },
                        new
                        {
                            Id = 43,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4151),
                            IsDelete = false,
                            ParentId = 32,
                            Title = "افزودن دسته بندی"
                        },
                        new
                        {
                            Id = 44,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4165),
                            IsDelete = false,
                            ParentId = 32,
                            Title = "ویرایش دسته بندی"
                        },
                        new
                        {
                            Id = 45,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4180),
                            IsDelete = false,
                            ParentId = 32,
                            Title = "حذف دسته بندی"
                        },
                        new
                        {
                            Id = 46,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4195),
                            IsDelete = false,
                            ParentId = 1,
                            Title = "مدیریت بنر"
                        },
                        new
                        {
                            Id = 47,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4264),
                            IsDelete = false,
                            ParentId = 46,
                            Title = "افزودن بنر"
                        },
                        new
                        {
                            Id = 48,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4284),
                            IsDelete = false,
                            ParentId = 46,
                            Title = "ویرایش بنر"
                        },
                        new
                        {
                            Id = 49,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4300),
                            IsDelete = false,
                            ParentId = 46,
                            Title = "حذف بنر"
                        },
                        new
                        {
                            Id = 50,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4315),
                            IsDelete = false,
                            ParentId = 1,
                            Title = " مدیریت صفحه های داینامیک"
                        },
                        new
                        {
                            Id = 51,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4331),
                            IsDelete = false,
                            ParentId = 1,
                            Title = " مدیریت سوالات متداول"
                        });
                });

            modelBuilder.Entity("Domain.Models.Role.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("RoleTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(3398),
                            IsDelete = false,
                            RoleTitle = "مدیریت اصلی سایت"
                        });
                });

            modelBuilder.Entity("Domain.Models.Role.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4388),
                            IsDelete = false,
                            PermissionId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4430),
                            IsDelete = false,
                            PermissionId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4449),
                            IsDelete = false,
                            PermissionId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4465),
                            IsDelete = false,
                            PermissionId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4480),
                            IsDelete = false,
                            PermissionId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4496),
                            IsDelete = false,
                            PermissionId = 6,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4515),
                            IsDelete = false,
                            PermissionId = 7,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4530),
                            IsDelete = false,
                            PermissionId = 8,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4545),
                            IsDelete = false,
                            PermissionId = 13,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4564),
                            IsDelete = false,
                            PermissionId = 15,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4579),
                            IsDelete = false,
                            PermissionId = 16,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4594),
                            IsDelete = false,
                            PermissionId = 17,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 13,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4609),
                            IsDelete = false,
                            PermissionId = 18,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 14,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4624),
                            IsDelete = false,
                            PermissionId = 20,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 15,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4639),
                            IsDelete = false,
                            PermissionId = 21,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 16,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4653),
                            IsDelete = false,
                            PermissionId = 22,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 17,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4667),
                            IsDelete = false,
                            PermissionId = 23,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 18,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4683),
                            IsDelete = false,
                            PermissionId = 24,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 19,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4698),
                            IsDelete = false,
                            PermissionId = 25,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 20,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4713),
                            IsDelete = false,
                            PermissionId = 27,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 21,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4728),
                            IsDelete = false,
                            PermissionId = 28,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 22,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4744),
                            IsDelete = false,
                            PermissionId = 29,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 23,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4761),
                            IsDelete = false,
                            PermissionId = 30,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 24,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4804),
                            IsDelete = false,
                            PermissionId = 31,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 25,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4820),
                            IsDelete = false,
                            PermissionId = 32,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 26,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4835),
                            IsDelete = false,
                            PermissionId = 33,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 27,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4850),
                            IsDelete = false,
                            PermissionId = 34,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 28,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4865),
                            IsDelete = false,
                            PermissionId = 35,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 29,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4881),
                            IsDelete = false,
                            PermissionId = 36,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 30,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4896),
                            IsDelete = false,
                            PermissionId = 37,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 31,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4911),
                            IsDelete = false,
                            PermissionId = 38,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 32,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4928),
                            IsDelete = false,
                            PermissionId = 39,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 33,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4943),
                            IsDelete = false,
                            PermissionId = 40,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 34,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4962),
                            IsDelete = false,
                            PermissionId = 41,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 35,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4978),
                            IsDelete = false,
                            PermissionId = 42,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 36,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4993),
                            IsDelete = false,
                            PermissionId = 43,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 37,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(5008),
                            IsDelete = false,
                            PermissionId = 44,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 38,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(5025),
                            IsDelete = false,
                            PermissionId = 45,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 39,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(5040),
                            IsDelete = false,
                            PermissionId = 46,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 40,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(5055),
                            IsDelete = false,
                            PermissionId = 47,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 41,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(5070),
                            IsDelete = false,
                            PermissionId = 48,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 42,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(5085),
                            IsDelete = false,
                            PermissionId = 49,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 43,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(5100),
                            IsDelete = false,
                            PermissionId = 50,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 44,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(5115),
                            IsDelete = false,
                            PermissionId = 51,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Domain.Models.Role.UserRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(5132),
                            IsDelete = false,
                            RoleId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Domain.Models.Tickets.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadByAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadByOwner")
                        .HasColumnType("bit");

                    b.Property<int>("Levels")
                        .HasColumnType("int");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("Part")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Domain.Models.Tickets.TicketMassages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketMassages");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActiveCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActiveCode = "123456",
                            BirthDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4363),
                            CreatDate = new DateTime(2022, 9, 22, 20, 34, 11, 368, DateTimeKind.Local).AddTicks(4358),
                            Email = "/",
                            Gender = 0,
                            IsAdmin = true,
                            IsDelete = false,
                            Password = "20-2C-B9-62-AC-59-07-5B-96-4B-07-15-2D-23-4B-70",
                            PhoneNumber = "12345678910",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Domain.Models.Common.DynamicPage", b =>
                {
                    b.HasOne("Domain.Models.Common.DynamicLink", "DynamicLink")
                        .WithOne("DynamicPage")
                        .HasForeignKey("Domain.Models.Common.DynamicPage", "LinkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DynamicLink");
                });

            modelBuilder.Entity("Domain.Models.Common.Log", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Order.Order", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Order.OrderDetail", b =>
                {
                    b.HasOne("Domain.Models.Order.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.Product.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.Product.ProductPrice", "ProductPrice")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductPriceId");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("ProductPrice");
                });

            modelBuilder.Entity("Domain.Models.Order.OrderDetailProductFeature", b =>
                {
                    b.HasOne("Domain.Models.Order.OrderDetail", "OrderDetail")
                        .WithMany()
                        .HasForeignKey("OrderDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("Domain.Models.Product.FavoriteProduct", b =>
                {
                    b.HasOne("Domain.Models.Product.Product", "Product")
                        .WithMany("FavoriteProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("FavoriteProducts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Product.FeatureValue", b =>
                {
                    b.HasOne("Domain.Models.Product.Feature", "Feature")
                        .WithMany("FeatureValues")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("Domain.Models.Product.Product", b =>
                {
                    b.HasOne("Domain.Models.Product.ProductCategory", null)
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId");
                });

            modelBuilder.Entity("Domain.Models.Product.ProductCategory", b =>
                {
                    b.HasOne("Domain.Models.Product.ProductCategory", "Category")
                        .WithMany()
                        .HasForeignKey("ParnetId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Models.Product.ProductComment", b =>
                {
                    b.HasOne("Domain.Models.Product.ProductComment", "ProductComments")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("Domain.Models.Product.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductComments");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Product.ProductGallery", b =>
                {
                    b.HasOne("Domain.Models.Product.Product", "Product")
                        .WithMany("ProductGalleries")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Models.Product.ProductPrice", b =>
                {
                    b.HasOne("Domain.Models.Product.Product", "Product")
                        .WithMany("productPrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Models.Product.ProductSelectedCategory", b =>
                {
                    b.HasOne("Domain.Models.Product.ProductCategory", "ProductCategory")
                        .WithMany("ProductSelectedCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.Product.Product", "Product")
                        .WithMany("ProductSelectedCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("Domain.Models.Product.ProductSelectedFeature", b =>
                {
                    b.HasOne("Domain.Models.Product.Feature", "Feature")
                        .WithMany("productSelectedFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.Product.FeatureValue", "featureValue")
                        .WithMany("productSelectedFeatures")
                        .HasForeignKey("FeatureValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.Product.ProductPrice", "productPrice")
                        .WithMany("productSelectedFeatures")
                        .HasForeignKey("ProductPriceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("featureValue");

                    b.Navigation("productPrice");
                });

            modelBuilder.Entity("Domain.Models.Product.ProductTag", b =>
                {
                    b.HasOne("Domain.Models.Product.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Models.Role.Permission", b =>
                {
                    b.HasOne("Domain.Models.Role.Permission", "Permission1")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Permission1");
                });

            modelBuilder.Entity("Domain.Models.Role.RolePermission", b =>
                {
                    b.HasOne("Domain.Models.Role.Permission", "Permission")
                        .WithMany("RolePermission")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.Role.Role", "Role")
                        .WithMany("RolePermission")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Models.Role.UserRoles", b =>
                {
                    b.HasOne("Domain.Models.Role.Role", "Role")
                        .WithMany("UserRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Tickets.Ticket", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Tickets.TicketMassages", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("TicketMassagesList")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.Tickets.Ticket", "Ticket")
                        .WithMany("TicketMassagesList")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Common.DynamicLink", b =>
                {
                    b.Navigation("DynamicPage");
                });

            modelBuilder.Entity("Domain.Models.Order.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Domain.Models.Product.Feature", b =>
                {
                    b.Navigation("FeatureValues");

                    b.Navigation("productSelectedFeatures");
                });

            modelBuilder.Entity("Domain.Models.Product.FeatureValue", b =>
                {
                    b.Navigation("productSelectedFeatures");
                });

            modelBuilder.Entity("Domain.Models.Product.Product", b =>
                {
                    b.Navigation("FavoriteProducts");

                    b.Navigation("ProductGalleries");

                    b.Navigation("ProductSelectedCategories");

                    b.Navigation("ProductTags");

                    b.Navigation("productPrices");
                });

            modelBuilder.Entity("Domain.Models.Product.ProductCategory", b =>
                {
                    b.Navigation("ProductSelectedCategories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Models.Product.ProductPrice", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("productSelectedFeatures");
                });

            modelBuilder.Entity("Domain.Models.Role.Permission", b =>
                {
                    b.Navigation("RolePermission");
                });

            modelBuilder.Entity("Domain.Models.Role.Role", b =>
                {
                    b.Navigation("RolePermission");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Domain.Models.Tickets.Ticket", b =>
                {
                    b.Navigation("TicketMassagesList");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("FavoriteProducts");

                    b.Navigation("Logs");

                    b.Navigation("Orders");

                    b.Navigation("TicketMassagesList");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
